print("Hello World\n")
iris
###
### PACKAGES
###
#install.packages('forecast')
#install.packages('tidyverse')
#install.packages('caret')
#install.packages('lubridate')
#install.packages('fpp2')
library(tidyverse)
library(dplyr)
library(caret)
library(forecast)
library(lubridate)
library(ggplot2)
library(fpp2)
###
### SETUP WORKING AREA
getwd()
setwd("C:\\Users\\bmccs\\OneDrive\\Finance")
df <- read.csv('TQQQ.csv', header=TRUE)
###
### TRANSFORM DATA
###
head(df)
df <- df %>% mutate(Date=ymd(Date), Close = as.double(Close))
tail(df)
str(df)
###
### BASIc PLOT
###
closingPrices <- ts(df$Close, frequency = 12)
autoplot(closingPrices) + xlab("Day") + ylab("Closing Price ($)") +
ggtitle("Daily Closing Price: TQQQ", subtitle = "Apr 20 2018 - Apr 20 2019")
###
### 30DAY-MOVING AVERAGE (30-MA)
###
autoplot(closingPrices, series="Data") +
autolayer(ma(closingPrices,30), series="30-MA") +
xlab("Day") + ylab("Closing Price ($)") +
ggtitle("Daily Closing Price: TQQQ", subtitle = "Apr 20 2018 - Apr 20 2019") +
scale_colour_manual(values=c("Data"="grey50","30-MA"="red"),
breaks=c("Data","30-MA"))
###
### CLASSICAL DECOMPOSITION
### Sometimes examining the trend can help you find windows of opportunity that avoid high peaks or low valleys
###
df$Date %>%  head
ts_df_close<-ts(df$Close,
frequency =365.25)
?ts
ts.plot(ts_df_close)
fit<- decompose(ts_df_close,type="additive")
plot(fit)
plot(fit$trend-fit$seasonal-fit$random)
plot(fit$seasonal[1200:length(fit$seasonal)], type="line")
fit$seasonal %>% length
###
### STL FORECAST
###
ts_df_close
fit <- stl(ts_df_close,t.window=31, s.window="periodic",
robust=TRUE)
fit %>% autoplot()
fit %>% seasadj() %>% naive() %>%
autoplot() + ylab("Closing ($)") + xlab("Day Number")
ggtitle("TQQQ Prediction Interval" ,subtitle="Naive forecasts of seasonally adjusted data")
fit %>% seasadj() %>%  head(10)
preds <- fit %>% seasadj() %>% naive()
preds
plot(preds)
preds
plot(preds)
forecast(fit)
preds <- fit %>% seasadj() %>% naive()
plot(preds)
preds
fit
fit %>% forecast
class(fit)
class(forecast)
head(df$Date)
ts_df_close<-ts(df$Close,
start=c(2014, 4)
frequency =365.25)
ts_df_close<-ts(df$Close,
start=c(2014, 4),
frequency =365.25)
?ts
ts.plot(ts_df_close)
fit<- decompose(ts_df_close,type="additive")
plot(fit)
plot(fit$trend-fit$seasonal-fit$random)
plot(fit$seasonal[1200:length(fit$seasonal)], type="line")
fit$seasonal %>% length
###
### STL FORECAST
###
ts_df_close
fit <- stl(ts_df_close,t.window=31, s.window="periodic",
robust=TRUE)
fit %>% autoplot()
fit %>% seasadj() %>% naive() %>%
autoplot() + ylab("Closing ($)") + xlab("Day Number")
ggtitle("TQQQ Prediction Interval" ,subtitle="Naive forecasts of seasonally adjusted data")
ts_df_close<-ts(df$Close,
start=c(2014, 4, 22),
frequency =365.25)
?ts
ts.plot(ts_df_close)
fit<- decompose(ts_df_close,type="additive")
plot(fit)
plot(fit$trend-fit$seasonal-fit$random)
plot(fit$seasonal[1200:length(fit$seasonal)], type="line")
fit$seasonal %>% length
###
### STL FORECAST
###
ts_df_close
fit <- stl(ts_df_close,t.window=31, s.window="periodic",
robust=TRUE)
fit %>% autoplot()
fit %>% seasadj() %>% naive() %>%
autoplot() + ylab("Closing ($)") + xlab("Day Number")
ggtitle("TQQQ Prediction Interval" ,subtitle="Naive forecasts of seasonally adjusted data")
fit %>% forecast
class(fit)
head(df$Date)
ts_df_close<-ts(df$Close,
start=c(2014, 4, 21),
frequency =365.25)
###
### STL FORECAST
###
ts_df_close
fit <- stl(ts_df_close,t.window=31, s.window="periodic",
robust=TRUE)
fit %>% autoplot()
fit %>% seasadj() %>% naive() %>%
autoplot() + ylab("Closing ($)") + xlab("Day Number")
fit %>% forecast
fit %>% forecast %>% autoplot()
fit %>% forecast %>% autoplot() + ggtitle("YO")
expectedOutput <- fit %>% forecast
expectedOutput
fit %>% forecast %>% tail(100) %>% autoplot() + ggtitle("YO")
fit %>% forecast %>% autoplot() + ggtitle("YO")
expectedOutput <- fit %>% forecast
expectedOutput
expectedOutput[-100:, length(expectedOutput)]
expectedOutput[-100:length(expectedOutput)]
expectedOutput[100:length(expectedOutput)]
length(expectedOuptu)
length(expectedOutput)
expectedOutput %>% autoplot()
df$Dat
df$Date
df$Date %>% tail
fit %>% forecast %>% autoplot() + ggtitle("TQQQ Prediction Interval", subtitle="10 Day Forecast")
plt <- fit %>% forecast %>% autoplot() + ggtitle("TQQQ Prediction Interval", subtitle="10 Day Forecast")
plt <- plt + scale_x_discrete(limits=1:6, labels = c(2014,2015,2016,2017,2018,2019))
plt
seq(4:9)
seq(4:9,1)
seq(2014,2019,1)
plt <- plt + scale_x_discrete(limits = seq(2014,2019,1))
plt
plt <- plt + scale_x_discrete(limits = seq(2014,2019,1)) + scale_y_continuous()
plt
plt <- plt + scale_x_discrete(limits = seq(2014,2019,1)) + scale_y_continuous(limits = c(-100,300))
plt
plt <- fit %>% forecast %>% autoplot() + ggtitle("TQQQ Prediction Interval", subtitle="10 Day Forecast")
plt
plt <- fit %>% forecast %>% autoplot() + ggtitle("TQQQ Prediction Interval", subtitle="10 Day Forecast")
plt <- plt + scale_x_continuous(breaks=number_ticks(10)) + scale_y_continuous(breaks=number_ticks(10))
plt <- plt + scale_x_continuous(breaks=seq(2014,2019,1)) + scale_y_continuous(breaks=seq(-100,300,1))
plt <- plt + scale_x_discrete(limits = seq(2014,2019,1)) + scale_y_continuous(limits = c(-100,300))
plt
plt <- fit %>% forecast %>% autoplot() + ggtitle("TQQQ Prediction Interval", subtitle="10 Day Forecast")
plt <- plt + scale_x_continuous(breaks=seq(2014,2019,1)) + scale_y_continuous(breaks=seq(-100,300,1))
plt
plt <- fit %>% forecast %>% autoplot() + ggtitle("TQQQ Prediction Interval", subtitle="10 Day Forecast")
plt <- plt + scale_x_continuous(breaks=seq(2014,2019,1)) + scale_y_continuous(breaks=seq(-100,300,50))
plt
###
### CLASSICAL DECOMPOSITION
### Sometimes examining the trend can help you find windows of opportunity that avoid high peaks or low valleys
###
df <- read.csv('TQQQ.csv', header=TRUE)
df$Date %>%  head
df <- df %>% mutate(Date=ymd(Date), Close = as.double(Close))
ggplot(data=df) + geom_line(aes(x=Date, y=Close, size=Volume))
ggplot(data=df) + geom_line(aes(x=Date, y=Close))
ts_df_close<-ts(df$Close,
start=c(2014, 4, 21),
frequency =365.25)
?ts
ts.plot(ts_df_close)
library(tidyverse)
library(dplyr)
library(caret)
library(forecast)
library(lubridate)
library(ggplot2)
library(fpp2)
df <- read.csv('TQQQ.csv', header=TRUE)
df <- df %>% mutate(Date=ymd(Date), Close = as.double(Close))
ggplot(data=df) + geom_line(aes(x=Date, y=Close))
forecast(df$Close)
forecast(df$Close) %>%  plot
forecast(df$Close)
forecast(df$Close) %>%  class
forecast(df$Close) %>% data.frame
fc <-forecast(df$Close) %>% data.frame
fc
fc %>% head
fc %>% row.names
df$Date
df$Date %>% tail
seq.Date("2019-04-19","2019-04-29",by=1)
df <- read.csv('TQQQ.csv', header=TRUE)
df <- df %>% mutate(Date=ymd(Date), Close = as.double(Close))
ggplot(data=df) + geom_line(aes(x=Date, y=Close))
seq.Date(df$Date[nrow(df)],"2019-04-29",by=1)
seq.Date(df$Date[nrow(df)],as.Date("2019-04-29"),by=1)
seq.Date(as.Date("2019-04-19"),as.Date("2019-04-29"),by=1)
row.names(fc) <- seq.Date(as.Date("2019-04-19"),as.Date("2019-04-29"),by=1)
row.names(fc)
seq.Date(as.Date("2019-04-19"),as.Date("2019-04-29"),by=1) %>%  length
df$Date %>% tail
row.names(fc) <- seq.Date(as.Date("2019-04-19"),as.Date("2019-04-28"),by=1)
row.names(fc)<-seq.Date(as.Date("2019-04-19"),as.Date("2019-04-29"),by=1) %>%  length
row.names(fc)<-seq.Date(as.Date("2019-04-19"),as.Date("2019-04-28"),by=1) %>%  length
row.names(fc)
row.names(fc)<-seq.Date(as.Date("2019-04-19"),as.Date("2019-04-28"),by=1)
fc
fc %>% ggplot() + geom_line()
fc <-forecast(df$Close) %>% data.frame
fc %>% row.names
ggplot(data=df) + geom_line(aes(x=Date, y=Close))
plot(fc)
fc <-forecast(df$Close)
plot(fc)
plot(fc, title="TQQQ 10 Day Forecast")
plot(fc, title("TQQQ 10 Day Forecast"))
plot(fc)
fc
fc %>% plot
fit
fit %>% tail
mdeaths
df
df %>% mutate(Year=strsplit(as.character(Date))[[1]][1])
df %>% mutate(Year=strsplit(as.character(Date))[[1]])
df <- read.csv('TQQQ.csv', header=TRUE)
df %>% mutate(Year=strsplit(Date)[[1]])
df %>% mutate(Year=strsplit(Date))
df %>% mutate(Year=strsplit(Date, "-"))
df %>% mutate(Year=strsplit(Date, "-")[[1]])
strsplit("2019-04-19","-")
str(df)
df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]])
df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]][1])
df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]][1],
Month=strsplit(as.character(Date), "-")[[1]][2]) %>% summarise(AvgClose=mean(Year,Month))
df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]][1],
Month=strsplit(as.character(Date), "-")[[1]][2])
results <- df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]][1],
Month=strsplit(as.character(Date), "-")[[1]][2])
results %>%  tail
results %>%  tail(100)
results <- df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]],
Month=strsplit(as.character(Date), "-")[[2]])
results %>%  tail(100)
strsplit("2018-04-22", "-")
strsplit("2018-04-22", "-")[[1]]
strsplit("2018-04-22", "-")[[1]][2]
strsplit("2018-04-22", "-")[[1]][3]
strsplit("2018-04-22", "-")[[1]][4]
unlist(strsplit("2018-04-22", "-")[[1]])
strsplit("2018-04-22", "-")[[1]][4] %>% class
unlist(strsplit("2018-04-22", "-")[[1]]) %>%  class
unlist(strsplit("2018-04-22", "-")[[2]])
results <- df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]][1],
Month=strsplit(as.character(Date), "-")[[2]][2])
results[1:1000]
results[1:100]
results[1:100,:]
results[1:100,]
results <- df %>% mutate(Year=unlist(strsplit(as.character(Date), "-")[[1]])[1],
Month=unlist(strsplit(as.character(Date), "-")[[2]])[2])
results %>%  tail(100)
results <- df %>% mutate(Year=strsplit(as.character(Date), "-")[[1]][1],
Month=strsplit(as.character(Date), "-")[[1]][2])
results %>%  tail(100)
apply(df$Date, 1, function(x){strsplit(x,"-")[[1]][1]})
apply(df$Date, 1, function(x){strsplit(x[1],"-")[[1]][1]})
apply(df[,"Date"], 1, function(x){strsplit(x[1],"-")[[1]][1]})
apply(df[,"Date"], 1, function(x){strsplit(x,"-")[[1]][1]})
apply(df[,"Date"], 1, function(x){x})
apply(df, 1, function(x){x})
apply(df, 1, function(x){x[1]})
apply(df, 1, function(x){strsplit(x[1], "-")[[1]][1]})
df$Year<-apply(df, 1, function(x){strsplit(x[1], "-")[[1]][1]})
df$Month<-apply(df, 1, function(x){strsplit(x[1], "-")[[1]][2]})
df %>%  head
df %>%  head(100)
df %>% select(Year, Month, Close) %>% spread(Year, Close)
df %>% select(Year, Month, Close) %>% spread(key = Year, value = Month, fill=Close)
df %>% select(Year, Month, Close) %>% summarise(AvgClose=mean(Year,Month)) %>% spread(Year, AvgClose)
df %>% select(Year, Month, Close) %>% summarise(AvgClose=mean(Year,Month))
df %>% select(Year, Month, Close) %>% group_by(Year,Month) %>% summarise(AvgClose=mean(Close))
df %>% select(Year, Month, Close) %>% group_by(Year,Month) %>% summarise(AvgClose=mean(Close)) %>% spread(Year, AvgClose)
df %>% select(Year, Month, Close) %>% group_by(Year,Month) %>% summarise(AvgClose=mean(Close)) %>% spread(Month, AvgClose)
mdeaths %>% class
agg_df <- df %>% select(Year, Month, Close) %>% group_by(Year,Month) %>% summarise(AvgClose=mean(Close)) %>% spread(Month, AvgClose)
agg_df
agg_df %>% ts
mdeaths
agg_df <- df %>% select(Year, Month, Close) %>% group_by(Year,Month) %>% summarise(AvgClose=mean(Close)) %>% ts
agg_df
autoplot(agg_df)
agg_df <- df %>% select(Year, Month, Close) %>% group_by(Year,Month) %>% summarise(AvgClose=mean(Close)) %>% spread(Month, AvgClose)
agg_df %>% ts
agg_df %>% autoplot()
agg_df %>% ts %>% autoplot()
agg_df
agg_df %>% class
mdeaths %>% data.frame
time_ser=ts(df$Close,frequency=365.25,start=c(2014,4))
time_ser
time_ser=ts(df$Close,frequency=365,start=c(2014,4))
time_ser
df$Close %>% tail(1)
df$Date %>% tail(1)
time_ser=ts(df$Close,frequency=365,start=c(2014,4))
time_ser
time_ser %>% tail(1)
df$Close %>% tail(1)
time_ser %>% forecast
time_ser %>% forecast %>% autoplot()
